use mydb

db.createCollection("orderinfo")

db.orderinfo.insertOne({
  cust_id: 123,
  cust_name: "abc",
  status: "A",
  price: 250
})


// i. Add “Age” field to the orderinfo collection
db.orderinfo.updateMany({}, { $set: { Age: 25 } });

// ii. Create the complex index on orderinfo collection and drop duplicates
db.orderinfo.createIndex({ cust_id: 1, cust_name: 1, status: 1, price: 1 }, { unique: true });
db.orderinfo.aggregate([
  { $group: { 
      _id: { cust_id: "$cust_id", cust_name: "$cust_name", status: "$status", price: "$price" },
      docs: { $push: "$_id" },
      count: { $sum: 1 }
    }
  },
  { $match: { count: { $gt: 1 } } }
]).forEach(doc => {
  doc.docs.shift();  // Keep one document
  db.orderinfo.deleteMany({ _id: { $in: doc.docs } });  // Remove duplicates
});

// iii. Display the average price for each customer grouped by status
db.orderinfo.aggregate([
  { $group: {
      _id: "$status",
      avgPrice: { $avg: "$price" }
    }
  }
]);

// iv. Change the customer’s name whose status is “B”
db.orderinfo.updateMany({ status: "B" }, { $set: { cust_name: "new_name" } });


//chit 24
// i. Display the name of the customer having the price between 250 and 450
db.orderinfo.find(
  { price: { $gt: 250, $lt: 450 } },
  { cust_name: 1, _id: 0 }
);

// ii. Increment the price by 10 for cust_id: 123 and decrement the price by 5 for cust_id: 124
db.orderinfo.updateOne(
  { cust_id: 123 },
  { $inc: { price: 10 } }
);

db.orderinfo.updateOne(
  { cust_id: 124 },
  { $inc: { price: -5 } }
);

// iii. Remove any one of the fields from the orderinfo collection (e.g., remove 'status')
db.orderinfo.updateMany(
  {},
  { $unset: { status: "" } }
);

// iv. Find the name of the customer whose status is either "A" or price is 250, or both
db.orderinfo.find(
  {
    $or: [
      { status: "A" },
      { price: 250 }
    ]
  },
  { cust_name: 1, _id: 0 }
);
